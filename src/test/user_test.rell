@test module;
import ^^.user.{user, create_user, create_user_};
import ^^.auth.*;
import ^^.balance.{balance, INITIAL_BALANCE};

function test_create_user() {

    val alice_pk = rell.test.keypairs.alice.pub;
    val alice_un = 'Alice';

    assert_equals(user@*{}, list<user>());

    val tx1 = rell.test.tx().op(create_user(alice_un)).sign(rell.test.keypairs.alice);
    rell.test.block().tx(tx1).run();

    assert_equals(user@*{}(.username), [alice_un]);
    assert_equals(user@*{}(.pubkey), [alice_pk]);
    assert_equals(balance@{user@{.username == alice_un}}(.amount), INITIAL_BALANCE);
}

function test_create_user_multiple() {

    val alice_pk = rell.test.keypairs.alice.pub;
    val alice_un = 'Alice';

    val bob_pk = rell.test.keypairs.bob.pub;
    val bob_un = 'Bob';

    val tx1 = rell.test.tx().op(create_user(alice_un)).sign(rell.test.keypairs.alice);
    rell.test.block().tx(tx1).run();

    assert_equals(user@*{}(.username), [alice_un]);
    assert_equals(user@*{}(.pubkey), [alice_pk]);
    assert_equals(balance@{user@{.username == alice_un }}(.amount), INITIAL_BALANCE);

    val tx2 = rell.test.tx().op(create_user(bob_un)).sign(rell.test.keypairs.bob);
    rell.test.block().tx(tx2).run();

    assert_equals(user@{.username == bob_un}(.pubkey), bob_pk);
    assert_equals(balance@{user@{.username == bob_un }}(.amount), INITIAL_BALANCE);
} 

function test_create_user_duplicate() {
    
    val alice_pk = rell.test.keypairs.alice.pub;
    val alice_un = 'Alice';
    
    val tx1 = rell.test.tx().op(create_user(alice_un)).sign(rell.test.keypairs.alice);
    rell.test.block().tx(tx1).run();

    val tx2 = rell.test.tx().op(create_user(alice_un)).sign(rell.test.keypairs.alice);
    rell.test.block().tx(tx2).run_must_fail();
        
    assert_equals(balance@{user@{.username == alice_un}}(.amount), INITIAL_BALANCE);
} 