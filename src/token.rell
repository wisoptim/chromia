module;
import user.*;
import balance.*;
import auth.*;



entity token { 
  key name;
  key text: text;
  mutable favorite: boolean;
  mutable owner: user;
}

operation mint_token (session_token: pubkey,  name,  text) {
  val pubkey = validate_session_test(session_token);
  require(pubkey);
  val owner = user@{pubkey};
  create token (name, text, false, owner);
}

operation switch_favorite_token (session_token: pubkey, token_name:name) {
 val pubkey = validate_session_test(session_token);
 require(pubkey);
 val owner = user@{pubkey};
 val token = token@{.name == token_name};
 val favorite_value = token.favorite;
 update token(.favorite = not favorite_value);
}

operation transfer_token (session_token: pubkey, token_name:text, to_username:text) {
  val pubkey = validate_session_test(session_token);
  require(pubkey);
  
  val from_user = user@{pubkey};
  val token = token@{.name == token_name, .owner == from_user} ;
  require(token.owner == from_user);
  
  val new_owner = user@{.username == to_username};
  update token(.owner = new_owner);
}

query get_tokens_by_user (username:name):list<(token)> {
  return token@*{.owner == user@{username}};
}

query get_token_by_token_name (tokenname:name):(token) {
  return token@{.name == tokenname};
}